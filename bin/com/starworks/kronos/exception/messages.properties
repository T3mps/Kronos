###################################
###            KRONOS           ###
###################################

# Window
core.window.invalidWidth = The width of a window must be greater than 0.
core.window.invalidHeight = The height of a window must be greater than 0.
core.window.invalidTitle = The title of a window cannot be null.
core.window.initializationFailed = Unable to initialized GLFW. The window cannot be created.
core.window.creationFailed = Failed to create GLFW window.
core.window.invalidEvent = Attempted to register an invalid event.

# Scene
scene.scene.rigidbodyComponentAbsent = A game object must have a RigidbodyComponent before having any colliders.

###################################
###            LOGGING          ###
###################################

# LoggerBuilder
logging.loggerBuilder.nullType = Cannot build a logger from null type.

# Appender
logging.appender.rollingFileAppender.initialFileCorruption = Unable to roll initial backup file. The file may be missing or corrupt.
logging.appender.fileAppender.lines = Unable to count lines in opened log file.

# Level
logging.level.invalidLevelString = Unable to convert level string into Level instance, for it is unknown.
logging.level.invalidLevelInteger = Unable to convert level integer into Level instance, for it is out of range.
logging.level.invalidLevelCount = Invalid number of levels to combine.

###################################
###             JOBS            ###
###################################

# Job
jobs.job.matchingDependencyPriority = Invalid priority level detected for dependency chain. Job priority must be greater than or equal to dependency priority. Otherwise, the dependency will never be executed and this Job will become locked.

# Job Manager
jobs.jobManager.shutdownTimeout = Jobs manager shutdown exceeded allotted shutdown timeout.

###################################
###            PHYSICS          ###
###################################

# General
physics.nullWorld = The world cannot be null.
physics.invalidDensity = The density must be greater than or equal to 0.
physics.invalidFriction = The coefficient of friction cannot be negative.
physics.invalidRestitution = The coefficient of restitution cannot be negative.
physics.invalidDeltaTime = The delta time must be greater than zero.

# Bounds
physics.collision.bounds.invalidExtents = The width and height must be greater than zero.

# Fixture
physics.dynamics.fixture.nullCollider = A fixture cannot be initialized with null collider.

# Body
physics.dynamics.rigidbody.addNullFixture = A rigidbody cannot contain any null fixture.
physics.dynamics.rigidbody.nullCollider = The collider may not be null.
physics.dynamics.rigidbody.nullTransform = A rigidbody cannot have null transform.
physics.dynamics.rigidbody.nullForce = Null force cannot be applied to a rigidbody.
physics.dynamics.rigidbody.nullTorqueForce = Torque cannot be applied with null force.
physics.dynamics.rigidbody.nullTorquePoint = Torque cannot be applied with null point.
physics.dynamics.rigidbody.nullTorque = Null torque cannot be applied to a rigidbody.
physics.dynamics.rigidbody.nullImpulse = Null impulse cannot be applied to a rigidbody.
physics.dynamics.rigidbody.nullImpulsePoint = An impulse cannot be applied with null point.
physics.dynamics.rigidbody.nullMass = The mass cannot be null.
physics.dynamics.rigidbody.nullMassType = The mass type cannot be null.
physics.dynamics.rigidbody.nullVelocity = The velocity vector cannot be null.
physics.dynamics.rigidbody.invalidLinearDamping = Linear damping may not be negative.
physics.dynamics.rigidbody.invalidAngularDamping = Angular damping may not be negative.

# Constraint
physics.dynamics.constraint.nullBodyA = BodyA cannot be null.
physics.dynamics.constraint.nullBodyB = BodyB cannot be null.

# Force
physics.dynamics.force.nullForce = Force cannot be null.

# Torque
physics.dynamics.torque.nullTorque = Torque cannot be null.

# ContactPoint
physics.dynamics.contact.contactPoint.nullContactPoint = Cannot copy null contact point.

# Joint
physics.dynamics.joint.selfLinking = May not join a body to itself.
physics.dynamics.joint.nullAnchor = The anchor point cannot be null.
physics.dynamics.joint.nullAnchorA = Anchor A cannot be null.
physics.dynamics.joint.nullAnchorB = Anchor B cannot be null.
physics.dynamics.joint.nullAxis = The axis cannot be null.
physics.dynamics.joint.invalidDampingRatio = The damping ratio must be between 0 and 1 inclusive.
physics.dynamics.joint.invalidFrequency = The frequency must be greater than or equal to zero.
physics.dynamics.joint.invalidFrequencyZero = The frequency must be greater than zero.
physics.dynamics.joint.invalidLowerLimit = The lower limit cannot be greater than the upper limit.
physics.dynamics.joint.invalidUpperLimit = The upper limit cannot be less than the lower limit.
physics.dynamics.joint.invalidLimits = The lower limit cannot be greater than the upper limit.
physics.dynamics.joint.invalidMaximumMotorForce = The maximum motor force must be greater than or equal to zero.
physics.dynamics.joint.invalidMaximumMotorTorque = The maximum motor torque must be greater than or equal to zero.

# AngleJoint
physics.dynamics.joint.angle.invalidRaio = The ratio cannot be zero. Set the ratio to 1.0 to disable it.

# DistanceJoint
physics.dynamics.joint.distance.invalidDistance = The distance must be greater than or equal to zero.
physics.dynamics.joint.distance.lessThanZeroUpperLimit = The upper limit must be greater than or equal to zero.
physics.dynamics.joint.distance.lessThanZeroLowerLimit = The lower limit must be greater than or equal to zero.
physics.dynamics.joint.distance.invalidLimit = The limit must be greater than zero.

# FrictionJoint
physics.dynamics.joint.friction.invalidMaximumTorque = The maximum torque must be greater than or equal to zero.
physics.dynamics.joint.friction.invalidMaximumForce = The maximum force must be greater than or equal to zero.

# MotorJoint
physics.dynamics.joint.motor.invalidCorrectionFactor = The correction factor must be between [0 and 1].

# PinJoint
physics.dynamics.joint.pin.nullAnchor = The anchor point cannot be null.
physics.dynamics.joint.pin.nullTarget = The target point cannot be null.
physics.dynamics.joint.pin.invalidMaximumForce = The max force must be zero or greater.

# PulleyJoint
physics.dynamics.joint.pulley.invalidRatio = The pulley ratio must be greater than zero. A value of 1.0 disables the block-and-tackle.
physics.dynamics.joint.pulley.invalidLength = The pulley length must be greater than or equal to zero.
physics.dynamics.joint.pulley.nullBodyAnchorA = Body anchor A cannot be null.
physics.dynamics.joint.pulley.nullBodyAnchorB = Body anchor B cannot be null.
physics.dynamics.joint.pulley.nullPulleyAnchorA = Pulley anchor A cannot be null.
physics.dynamics.joint.pulley.nullPulleyAnchorB = Pulley anchor B cannot be null.

# RevoluteJoint
physics.dynamics.joint.revolute.doublyFixedRotation = A RevoluteJoint must have at least one rigidbody without fixed angular velocity.

# World
physics.world.addNullBody = Null rigidbody cannot be added to the world.
physics.world.addExistingBody = The world already contains the specified rigidbody.
physics.world.addConcurrentBody = The rigidbody already exists in another world.
physics.world.addNullJoint = Null joint cannot be added to the world.
physics.world.addExistingJoint = The world already contains the specified joint.
physics.world.addConcurrentJoint = The joint already exists in another world.
physics.world.addJointWithoutBodies = A joint may only join bodies which exist in the same world.
physics.world.nullGravity = The gravity vector cannot be null.
physics.world.nullListener = Null listener cannot be added.
physics.world.addExistingListener = The world already contains the specified listener.

# Geometry
physics.geometry.nullPointList = The list of points cannot be null.
physics.geometry.invalidSizePointList2 = The list of points must contain at least 2 non-null points.
physics.geometry.nullPointListElements = The list of points cannot contain null points.
physics.geometry.nullPointArray = The points array cannot be null.
physics.geometry.invalidSizePointArray2 = The points array must contain at least 2 non-null points.
physics.geometry.nullPointArrayElements = The points array cannot contain null points.
physics.geometry.invalidSizePointList1 = The list of points must contain one point minimum.
physics.geometry.invalidSizePointArray1 = The points array must have at least one point.
physics.geometry.nullVerticesArray = The vertices array cannot be null.
physics.geometry.nullPolygonPoint = A polygon cannot contain null points.
physics.geometry.invalidVerticesSize = The number of vertices must be greater than 2.
physics.geometry.invalidRadius = The radius must be greater than zero.
physics.geometry.invalidSize = The size must be greater than zero.
physics.geometry.nullTrianglePoint = A triangle cannot contain null point.
physics.geometry.invalidWidth = The width must be greater than zero.
physics.geometry.invalidHeight = The height must be greater than zero.
physics.geometry.nullSegmentPoint = A segment cannot contain null point.
physics.geometry.invalidLength = The length must be greater than zero.
physics.geometry.nullFlipPolygon = The polygon cannot be null.
physics.geometry.nullFlipAxis = The flip axis cannot be null.
physics.geometry.zeroFlipAxis = The flip axis cannot be the zero vector.
physics.geometry.circleInvalidCount = The number of vertices must be greater than 2.
physics.geometry.circleInvalidRadius = The radius must be greater than zero.
physics.geometry.capsuleInvalidCount = The number of cap vertices must be greater than or equal to 1.
physics.geometry.capsuleInvalidWidth = The width must be greater than zero.
physics.geometry.capsuleInvalidHeight = The height must be greater than zero.
physics.geometry.ellipseInvalidCount = The number of vertices must be greater than 3.
physics.geometry.ellipseInvalidWidth = The width must be greater than zero.
physics.geometry.ellipseInvalidHeight = The height must be greater than zero.
physics.geometry.nullMinkowskiSumCircle = The circle cannot be null.
physics.geometry.nullMinkowskiSumPolygon = The polygon cannot be null.
physics.geometry.invalidMinkowskiSumRadius = The radius must be greater than zero.
physics.geometry.invalidMinkowskiSumCount = The vertex count must be greater than zero.
physics.geometry.nullMinkowskiSumCollider = Both colliders must be non-null.
physics.geometry.invalidMinkowskiSumSegments = The segments cannot be colinear.
physics.geometry.nullCollider = Collider cannot be null.
physics.geometry.crossingEdges = A simple polygon cannot have crossing edges.
physics.geometry.decomposeNullArray = Cannot decompose null array of points.
physics.geometry.invalidDecompositonTarget = The polygon must have 4 or more vertices.
physics.geometry.nullHullArray = The point array cannot be null.
physics.geometry.nullHullPoints = The point array cannot contain null points.

# AABB
physics.geometry.aabb.invalidExtents = The min cannot be greater than the max.
physics.geometry.aabb.invalidRadius = The radius must be greater than or equal to zero.

# Circle
physics.geometry.circle.invalidRadius = The radius must be greater than zero.

# Polygon
physics.geometry.polygon.nullArray = The vertices array cannot be null.
physics.geometry.polygon.lessThan3Vertices = A polygon must have 3 or more vertices.
physics.geometry.polygon.nullVertices = The vertices array cannot contain null points.
physics.geometry.polygon.coincidentVertices = A polygon cannot have coincident vertices.
physics.geometry.polygon.collinearVertices = A polygon cannot have any collinear vertices.
physics.geometry.polygon.nonCollider = A polygon must be convex.
physics.geometry.polygon.invalidWinding = A polygon must have Counter-Clockwise vertex winding.
physics.geometry.polygon.zeroArea = A polygon cannot have zero area.

# Rectangle
physics.geometry.rectangle.invalidWidth = A rectangle must have a positive non-zero width.
physics.geometry.rectangle.invalidHeight = A rectangle must have a positive non-zero height.

# Segment
physics.geometry.segment.nullPointA = Point A cannot be null.
physics.geometry.segment.nullPointB = Point B cannot be null.
physics.geometry.segment.samePoint = A line segment must have two different vertices.

# Capsule
physics.geometry.capsule.invalidWidth = A capsule must have a positive non-zero width.
physics.geometry.capsule.invalidHeight = A capsule must have a positive non-zero height.
physics.geometry.capsule.degenerate = The width and height cannot be close to equal, instead use a Circle collider type.

# Ellipse
physics.geometry.ellipse.invalidWidth = The width must be greater than zero.
physics.geometry.ellipse.invalidHeight = The height must be greater than zero.

# Mass
physics.geometry.mass.nullCenter = The center point cannot be null.
physics.geometry.mass.invalidMass = The mass must be greater than or equal to zero.
physics.geometry.mass.invalidInertia = The inertia tensor must be greater than or equal to zero.
physics.geometry.mass.nullMass = Cannot copy null mass.
physics.geometry.mass.nullMassList = The masses list cannot be null.
physics.geometry.mass.invalidMassListSize = The masses list must contain at least one non-null element.
physics.geometry.mass.nullMassListElement = The masses list cannot contain null elements.
physics.geometry.mass.nullMassType = The mass type cannot be null.

# Matrix
physics.geometry.matrix.nullArray = The values array cannot be null.
physics.geometry.matrix.invalidLength4 = The values array must be of length 4.
physics.geometry.matrix.invalidLength9 = The values array must be of length 9.

# Ray
physics.geometry.ray.nullStart = The start point cannot be null.
physics.geometry.ray.nullDirection = The direction cannot be null.
physics.geometry.ray.zeroDirection = A ray cannot have a zero direction vector.

# Rotation
physics.geometry.rotation.invalidPoint = The given values do not lie on the unit circle.